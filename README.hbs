# bitfields [![Build Status](https://travis-ci.com/octavetoast/bitfields.svg?branch=main)](https://travis-ci.com/octavetoast/bitfields) [![view on npm](http://img.shields.io/npm/v/bitfields.svg)](https://www.npmjs.org/package/bitfields)

Bitfields made easy in JavaScript.
This is not yet compatible with browsers, please do not open an issue regarding this.

## Installation

For Node.js projects, install with the NPM package manager:

```Bash
npm install --save bitfields
```

## Usage

```JavaScript

const { Bitfield } = require('bitfields')
// or
import { Bitfield } from 'bitfields'

const bitfield = new Bitfield(64) // create a Bitfield with 64 bits

bitfield.set(1) // set the first bit
bitfield.set(1, 1) // same as above
bitfield.set(1, true) // same as above

bitfield.set(3) // set the third bit

console.log(bitfield.get(1)) // 'true'
console.log(bitfield.get(2)) // 'false'
console.log(bitfield.get(3)) // 'true'

bitfield.set(3, false) // unset the third bit
bitfield.set(3, 0) // same as above

console.log(bitfield.get(3)) // 'false'

const buffer = bitfield.toBuffer() // convert to Buffer
const bigint = bitfield.toBigInt() // convert to BigInt
const hex = bitfield.toHex() // convert to hexadecimal string
const string = bitfield.toString() // convert to UTF-8 encoded string

console.log(buffer) // '<Buffer 40 00 00 00 00 00 00 00>'
console.log(bigint) // '4611686018427387904n'
console.log(hex) // '4000000000000000'
console.log(string) // '@'

const bitfieldFromBuffer = Bitfield.fromBuffer(buffer) // create a Bitfield from a Buffer
const bitfieldFromBigInt = Bitfield.fromBigInt(bigint) // create a Bitfield from a BigInt
const bitfieldFromHex = Bitfield.fromHex(hex) // create a Bitfield from a hexadecimal string
const bitfieldFromString = Bitfield.fromString(string) // create a Bitfield from a string

```

This is a basic example. For detailed documentation on each of these methods, check the API documention below.

# API

{{>main}}
